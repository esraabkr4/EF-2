// <auto-generated />
using System;
using EF_Demo.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Ass2.Migrations
{
    [DbContext(typeof(EnterpriseDBContext))]
    partial class EnterpriseDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Ass2.Model.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Topic_Id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Topic_Id")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EF_Ass2.Model.Course_Inst", b =>
                {
                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int>("Inst_ID")
                        .HasColumnType("int");

                    b.Property<int>("evaluate")
                        .HasColumnType("int");

                    b.HasKey("Course_ID", "Inst_ID");

                    b.HasIndex("Inst_ID");

                    b.ToTable("Course_Insts");
                });

            modelBuilder.Entity("EF_Ass2.Model.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateOnly>("HiringDate")
                        .HasColumnType("date");

                    b.Property<int>("Manager_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Manager_ID")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EF_Ass2.Model.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Dep_Id")
                        .HasColumnType("int");

                    b.Property<int?>("HourRate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("Dep_Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("EF_Ass2.Model.Stud_Course", b =>
                {
                    b.Property<int>("Stud_ID")
                        .HasColumnType("int");

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("Stud_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("Stud_Courses");
                });

            modelBuilder.Entity("EF_Ass2.Model.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Dep_Id")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Dep_Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EF_Ass2.Model.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("EF_Ass2.Model.Course", b =>
                {
                    b.HasOne("EF_Ass2.Model.Topic", "Topic")
                        .WithOne("Course")
                        .HasForeignKey("EF_Ass2.Model.Course", "Topic_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EF_Ass2.Model.Course_Inst", b =>
                {
                    b.HasOne("EF_Ass2.Model.Course", "Course")
                        .WithMany("course_Insts")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Ass2.Model.Instructor", "Instructor")
                        .WithMany("course_Insts")
                        .HasForeignKey("Inst_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EF_Ass2.Model.Department", b =>
                {
                    b.HasOne("EF_Ass2.Model.Instructor", "Manager")
                        .WithOne("ManagerDept")
                        .HasForeignKey("EF_Ass2.Model.Department", "Manager_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("EF_Ass2.Model.Instructor", b =>
                {
                    b.HasOne("EF_Ass2.Model.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("Dep_Id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_Ass2.Model.Stud_Course", b =>
                {
                    b.HasOne("EF_Ass2.Model.Course", "Course")
                        .WithMany("Stud_Course")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Ass2.Model.Student", "Student")
                        .WithMany("Stud_Course")
                        .HasForeignKey("Stud_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EF_Ass2.Model.Student", b =>
                {
                    b.HasOne("EF_Ass2.Model.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("Dep_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_Ass2.Model.Course", b =>
                {
                    b.Navigation("Stud_Course");

                    b.Navigation("course_Insts");
                });

            modelBuilder.Entity("EF_Ass2.Model.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EF_Ass2.Model.Instructor", b =>
                {
                    b.Navigation("ManagerDept")
                        .IsRequired();

                    b.Navigation("course_Insts");
                });

            modelBuilder.Entity("EF_Ass2.Model.Student", b =>
                {
                    b.Navigation("Stud_Course");
                });

            modelBuilder.Entity("EF_Ass2.Model.Topic", b =>
                {
                    b.Navigation("Course");
                });
#pragma warning restore 612, 618
        }
    }
}
